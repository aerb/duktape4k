void *duk_alloc(duk_context *ctx, size_t size);
void *duk_alloc_raw(duk_context *ctx, size_t size);
void duk_base64_decode(duk_context *ctx, int idx);
const char *duk_base64_encode(duk_context *ctx, int idx);
const char *duk_buffer_to_string(duk_context *ctx, int idx);
void duk_call(duk_context *ctx, int nargs);
void duk_call_method(duk_context *ctx, int nargs);
void duk_call_prop(duk_context *ctx, int obj_idx, int nargs);
void duk_cbor_decode(duk_context *ctx, int idx, unsigned int decode_flags);
void duk_cbor_encode(duk_context *ctx, int idx, unsigned int encode_flags);
int duk_char_code_at(duk_context *ctx, int idx, size_t char_offset);
int duk_check_stack(duk_context *ctx, int extra);
int duk_check_stack_top(duk_context *ctx, int top);
int duk_check_type(duk_context *ctx, int idx, int type);
int duk_check_type_mask(duk_context *ctx, int idx, unsigned int mask);
void duk_compact(duk_context *ctx, int obj_idx);
void duk_compile(duk_context *ctx, unsigned int flags);
void duk_compile_lstring(duk_context *ctx, unsigned int flags, const char *src, size_t len);
void duk_compile_lstring_filename(duk_context *ctx, unsigned int flags, const char *src, size_t len);
void duk_compile_string(duk_context *ctx, unsigned int flags, const char *src);
void duk_compile_string_filename(duk_context *ctx, unsigned int flags, const char *src);
double duk_components_to_time(duk_context *ctx, duk_time_components *comp);
void duk_concat(duk_context *ctx, int count);
void duk_config_buffer(duk_context *ctx, int idx, void *ptr, size_t len);
void duk_copy(duk_context *ctx, int from_idx, int to_idx);
duk_context *duk_create_heap(duk_alloc_function alloc_func,
                             duk_realloc_function realloc_func,
                             duk_free_function free_func,
                             void *heap_udata,
                             duk_fatal_function fatal_handler);
duk_context *duk_create_heap_default(void);
void duk_debugger_attach(duk_context *ctx,
                         duk_debug_read_function read_cb,
                         duk_debug_write_function write_cb,
                         duk_debug_peek_function peek_cb,
                         duk_debug_read_flush_function read_flush_cb,
                         duk_debug_write_flush_function write_flush_cb,
                         duk_debug_request_function request_cb,
                         duk_debug_detached_function detached_cb,
                         void *udata);
void duk_debugger_cooperate(duk_context *ctx);
void duk_debugger_detach(duk_context *ctx);
int duk_debugger_notify(duk_context *ctx, int nvalues);
void duk_debugger_pause(duk_context *ctx);
void duk_decode_string(duk_context *ctx, int idx, duk_decode_char_function callback, void *udata);
void duk_def_prop(duk_context *ctx, int obj_idx, unsigned int flags);
int duk_del_prop(duk_context *ctx, int obj_idx);
int duk_del_prop_heapptr(duk_context *ctx, int obj_idx, void *ptr);
int duk_del_prop_index(duk_context *ctx, int obj_idx, unsigned int arr_idx);
int duk_del_prop_literal(duk_context *ctx, int obj_idx, const char *key_literal);
int duk_del_prop_lstring(duk_context *ctx, int obj_idx, const char *key, size_t key_len);
int duk_del_prop_string(duk_context *ctx, int obj_idx, const char *key);
void duk_destroy_heap(duk_context *ctx);
void duk_dump_function(duk_context *ctx);
void duk_dup(duk_context *ctx, int from_idx);
void duk_dup_top(duk_context *ctx);
void duk_enum(duk_context *ctx, int obj_idx, unsigned int enum_flags);
int duk_equals(duk_context *ctx, int idx1, int idx2);
int duk_error(duk_context *ctx, int err_code, const char *fmt, ...);
int duk_error_va(duk_context *ctx, int err_code, const char *fmt, va_list ap);
void duk_eval(duk_context *ctx);
int duk_eval_error(duk_context *ctx, const char *fmt, ...);
int duk_eval_error_va(duk_context *ctx, const char *fmt, va_list ap);
void duk_eval_lstring(duk_context *ctx, const char *src, size_t len);
void duk_eval_lstring_noresult(duk_context *ctx, const char *src, size_t len);
void duk_eval_noresult(duk_context *ctx);
void duk_eval_string(duk_context *ctx, const char *src);
void duk_eval_string_noresult(duk_context *ctx, const char *src);
int duk_fatal(duk_context *ctx, const char *err_msg);
void duk_free(duk_context *ctx, void *ptr);
void duk_free_raw(duk_context *ctx, void *ptr);
void duk_freeze(duk_context *ctx, int obj_idx);
void duk_gc(duk_context *ctx, unsigned int flags);
int duk_generic_error(duk_context *ctx, const char *fmt, ...);
int duk_generic_error_va(duk_context *ctx, const char *fmt, va_list ap);
int duk_get_boolean(duk_context *ctx, int idx);
int duk_get_boolean_default(duk_context *ctx, int idx, int def_value);
void *duk_get_buffer(duk_context *ctx, int idx, size_t *out_size);
void *duk_get_buffer_data(duk_context *ctx, int idx, size_t *out_size);
void *duk_get_buffer_data_default(duk_context *ctx, int idx, size_t *out_size, void *def_ptr, size_t def_len);
void *duk_get_buffer_default(duk_context *ctx, int idx, size_t *out_size, void *def_ptr, size_t def_len);
duk_c_function duk_get_c_function(duk_context *ctx, int idx);
duk_c_function duk_get_c_function_default(duk_context *ctx, int idx, duk_c_function def_value);
duk_context *duk_get_context(duk_context *ctx, int idx);
duk_context *duk_get_context_default(duk_context *ctx, int idx, duk_context *def_value);
int duk_get_current_magic(duk_context *ctx);
int duk_get_error_code(duk_context *ctx, int idx);
void duk_get_finalizer(duk_context *ctx, int idx);
int duk_get_global_heapptr(duk_context *ctx, void *ptr);
int duk_get_global_literal(duk_context *ctx, const char *key_literal);
int duk_get_global_lstring(duk_context *ctx, const char *key, size_t key_len);
int duk_get_global_string(duk_context *ctx, const char *key);
void *duk_get_heapptr(duk_context *ctx, int idx);
void *duk_get_heapptr_default(duk_context *ctx, int idx, void *def_value);
int duk_get_int(duk_context *ctx, int idx);
int duk_get_int_default(duk_context *ctx, int idx, int def_value);
size_t duk_get_length(duk_context *ctx, int idx);
const char *duk_get_lstring(duk_context *ctx, int idx, size_t *out_len);
const char *duk_get_lstring_default(duk_context *ctx, int idx, size_t *out_len, const char *def_ptr, size_t def_len);
int duk_get_magic(duk_context *ctx, int idx);
void duk_get_memory_functions(duk_context *ctx, duk_memory_functions *out_funcs);
double duk_get_now(duk_context *ctx);
double duk_get_number(duk_context *ctx, int idx);
double duk_get_number_default(duk_context *ctx, int idx, double def_value);
void *duk_get_pointer(duk_context *ctx, int idx);
void *duk_get_pointer_default(duk_context *ctx, int idx, void *def_value);
int duk_get_prop(duk_context *ctx, int obj_idx);
void duk_get_prop_desc(duk_context *ctx, int obj_idx, unsigned int flags);
int duk_get_prop_heapptr(duk_context *ctx, int obj_idx, void *ptr);
int duk_get_prop_index(duk_context *ctx, int obj_idx, unsigned int arr_idx);
duk_bool_t duk_get_prop_literal(duk_context *ctx, int obj_idx, const char *key_literal);
int duk_get_prop_lstring(duk_context *ctx, int obj_idx, const char *key, size_t key_len);
int duk_get_prop_string(duk_context *ctx, int obj_idx, const char *key);
void duk_get_prototype(duk_context *ctx, int idx);
const char *duk_get_string(duk_context *ctx, int idx);
const char *duk_get_string_default(duk_context *ctx, int idx, const char *def_value);
int duk_get_top(duk_context *ctx);
int duk_get_top_index(duk_context *ctx);
int duk_get_type(duk_context *ctx, int idx);
unsigned int duk_get_type_mask(duk_context *ctx, int idx);
unsigned int duk_get_uint(duk_context *ctx, int idx);
unsigned int duk_get_uint_default(duk_context *ctx, int idx, unsigned int def_value);
int duk_has_prop(duk_context *ctx, int obj_idx);
int duk_has_prop_heapptr(duk_context *ctx, int obj_idx, void *ptr);
int duk_has_prop_index(duk_context *ctx, int obj_idx, unsigned int arr_idx);
int duk_has_prop_literal(duk_context *ctx, int obj_idx, const char *key_literal);
int duk_has_prop_lstring(duk_context *ctx, int obj_idx, const char *key, size_t key_len);
int duk_has_prop_string(duk_context *ctx, int obj_idx, const char *key);
void duk_hex_decode(duk_context *ctx, int idx);
const char *duk_hex_encode(duk_context *ctx, int idx);
void duk_insert(duk_context *ctx, int to_idx);
void duk_inspect_callstack_entry(duk_context *ctx, int level);
void duk_inspect_value(duk_context *ctx, int idx);
int duk_instanceof(duk_context *ctx, int idx1, int idx2);
int duk_is_array(duk_context *ctx, int idx);
int duk_is_boolean(duk_context *ctx, int idx);
int duk_is_bound_function(duk_context *ctx, int idx);
int duk_is_buffer(duk_context *ctx, int idx);
int duk_is_buffer_data(duk_context *ctx, int idx);
int duk_is_c_function(duk_context *ctx, int idx);
int duk_is_callable(duk_context *ctx, int idx);
int duk_is_constructable(duk_context *ctx, int idx);
int duk_is_constructor_call(duk_context *ctx);
int duk_is_dynamic_buffer(duk_context *ctx, int idx);
int duk_is_ecmascript_function(duk_context *ctx, int idx);
int duk_is_error(duk_context *ctx, int idx);
int duk_is_eval_error(duk_context *ctx, int idx);
int duk_is_fixed_buffer(duk_context *ctx, int idx);
int duk_is_function(duk_context *ctx, int idx);
int duk_is_lightfunc(duk_context *ctx, int idx);
int duk_is_nan(duk_context *ctx, int idx);
int duk_is_null(duk_context *ctx, int idx);
int duk_is_null_or_undefined(duk_context *ctx, int idx);
int duk_is_number(duk_context *ctx, int idx);
int duk_is_object(duk_context *ctx, int idx);
int duk_is_object_coercible(duk_context *ctx, int idx);
int duk_is_pointer(duk_context *ctx, int idx);
int duk_is_primitive(duk_context *ctx, int idx);
int duk_is_range_error(duk_context *ctx, int idx);
int duk_is_reference_error(duk_context *ctx, int idx);
int duk_is_strict_call(duk_context *ctx);
int duk_is_string(duk_context *ctx, int idx);
int duk_is_symbol(duk_context *ctx, int idx);
int duk_is_syntax_error(duk_context *ctx, int idx);
int duk_is_thread(duk_context *ctx, int idx);
int duk_is_type_error(duk_context *ctx, int idx);
int duk_is_undefined(duk_context *ctx, int idx);
int duk_is_uri_error(duk_context *ctx, int idx);
int duk_is_valid_index(duk_context *ctx, int idx);
void duk_join(duk_context *ctx, int count);
void duk_json_decode(duk_context *ctx, int idx);
const char *duk_json_encode(duk_context *ctx, int idx);
void duk_load_function(duk_context *ctx);
void duk_map_string(duk_context *ctx, int idx, duk_map_char_function callback, void *udata);
void duk_new(duk_context *ctx, int nargs);
int duk_next(duk_context *ctx, int enum_idx, int get_value);
int duk_normalize_index(duk_context *ctx, int idx);
int duk_opt_boolean(duk_context *ctx, int idx, int def_value);
void *duk_opt_buffer(duk_context *ctx, int idx, size_t *out_size, void *def_ptr, size_t def_len);
void *duk_opt_buffer_data(duk_context *ctx, int idx, size_t *out_size, void *def_ptr, size_t def_len);
duk_c_function duk_opt_c_function(duk_context *ctx, int idx, duk_c_function def_value);
duk_context *duk_opt_context(duk_context *ctx, int idx, duk_context *def_value);
void *duk_opt_heapptr(duk_context *ctx, int idx, void *def_value);
int duk_opt_int(duk_context *ctx, int idx, int def_value);
const char *duk_opt_lstring(duk_context *ctx, int idx, size_t *out_len, const char *def_ptr, size_t def_len);
double duk_opt_number(duk_context *ctx, int idx, double def_value);
void *duk_opt_pointer(duk_context *ctx, int idx, void *def_value);
const char *duk_opt_string(duk_context *ctx, int idx, const char *def_ptr);
unsigned int duk_opt_uint(duk_context *ctx, int idx, unsigned int def_value);
int duk_pcall(duk_context *ctx, int nargs);
int duk_pcall_method(duk_context *ctx, int nargs);
int duk_pcall_prop(duk_context *ctx, int obj_idx, int nargs);
int duk_pcompile(duk_context *ctx, unsigned int flags);
int duk_pcompile_lstring(duk_context *ctx, unsigned int flags, const char *src, size_t len);
int duk_pcompile_lstring_filename(duk_context *ctx, unsigned int flags, const char *src, size_t len);
int duk_pcompile_string(duk_context *ctx, unsigned int flags, const char *src);
int duk_pcompile_string_filename(duk_context *ctx, unsigned int flags, const char *src);
int duk_peval(duk_context *ctx);
int duk_peval_lstring(duk_context *ctx, const char *src, size_t len);
int duk_peval_lstring_noresult(duk_context *ctx, const char *src, size_t len);
int duk_peval_noresult(duk_context *ctx);
int duk_peval_string(duk_context *ctx, const char *src);
int duk_peval_string_noresult(duk_context *ctx, const char *src);
int duk_pnew(duk_context *ctx, int nargs);
void duk_pop(duk_context *ctx);
void duk_pop_2(duk_context *ctx);
void duk_pop_3(duk_context *ctx);
void duk_pop_n(duk_context *ctx, int count);
void duk_pull(duk_context *ctx, int from_idx);
int duk_push_array(duk_context *ctx);
int duk_push_bare_array(duk_context *ctx);
int duk_push_bare_object(duk_context *ctx);
void duk_push_boolean(duk_context *ctx, int val);
void *duk_push_buffer(duk_context *ctx, size_t size, int dynamic);
void duk_push_buffer_object(duk_context *ctx, int idx_buffer, size_t byte_offset, size_t byte_length, unsigned int flags);
int duk_push_c_function(duk_context *ctx, duk_c_function func, int nargs);
int duk_push_c_lightfunc(duk_context *ctx, duk_c_function func, int nargs, int length, int magic);
void duk_push_context_dump(duk_context *ctx);
void duk_push_current_function(duk_context *ctx);
void duk_push_current_thread(duk_context *ctx);
void *duk_push_dynamic_buffer(duk_context *ctx, size_t size);
int duk_push_error_object(duk_context *ctx, int err_code, const char *fmt, ...);
int duk_push_error_object_va(duk_context *ctx, int err_code, const char *fmt, va_list ap);
void duk_push_external_buffer(duk_context *ctx);
void duk_push_false(duk_context *ctx);
void *duk_push_fixed_buffer(duk_context *ctx, size_t size);
void duk_push_global_object(duk_context *ctx);
void duk_push_global_stash(duk_context *ctx);
void duk_push_heap_stash(duk_context *ctx);
int duk_push_heapptr(duk_context *ctx, void *ptr);
void duk_push_int(duk_context *ctx, int val);
const char *duk_push_literal(duk_context *ctx, const char *str_literal);
const char *duk_push_lstring(duk_context *ctx, const char *str, size_t len);
void duk_push_nan(duk_context *ctx);
void duk_push_new_target(duk_context *ctx);
void duk_push_null(duk_context *ctx);
void duk_push_number(duk_context *ctx, double val);
int duk_push_object(duk_context *ctx);
void duk_push_pointer(duk_context *ctx, void *p);
int duk_push_proxy(duk_context *ctx, unsigned int proxy_flags);
const char *duk_push_sprintf(duk_context *ctx, const char *fmt, ...);
const char *duk_push_string(duk_context *ctx, const char *str);
void duk_push_this(duk_context *ctx);
int duk_push_thread(duk_context *ctx);
int duk_push_thread_new_globalenv(duk_context *ctx);
void duk_push_thread_stash(duk_context *ctx, duk_context *target_ctx);
void duk_push_true(duk_context *ctx);
void duk_push_uint(duk_context *ctx, unsigned int val);
void duk_push_undefined(duk_context *ctx);
const char *duk_push_vsprintf(duk_context *ctx, const char *fmt, va_list ap);
void duk_put_function_list(duk_context *ctx, int obj_idx, const duk_function_list_entry *funcs);
int duk_put_global_heapptr(duk_context *ctx, void *ptr);
int duk_put_global_literal(duk_context *ctx, const char *key_literal);
int duk_put_global_lstring(duk_context *ctx, const char *key, size_t key_len);
int duk_put_global_string(duk_context *ctx, const char *key);
void duk_put_number_list(duk_context *ctx, int obj_idx, const duk_number_list_entry *numbers);
int duk_put_prop(duk_context *ctx, int obj_idx);
int duk_put_prop_heapptr(duk_context *ctx, int obj_idx, void *ptr);
int duk_put_prop_index(duk_context *ctx, int obj_idx, unsigned int arr_idx);
int duk_put_prop_literal(duk_context *ctx, int obj_idx, const char *key_literal);
int duk_put_prop_lstring(duk_context *ctx, int obj_idx, const char *key, size_t key_len);
int duk_put_prop_string(duk_context *ctx, int obj_idx, const char *key);
double duk_random(duk_context *ctx);
int duk_range_error(duk_context *ctx, const char *fmt, ...);
int duk_range_error_va(duk_context *ctx, const char *fmt, va_list ap);
void *duk_realloc(duk_context *ctx, void *ptr, size_t size);
void *duk_realloc_raw(duk_context *ctx, void *ptr, size_t size);
int duk_reference_error(duk_context *ctx, const char *fmt, ...);
int duk_reference_error_va(duk_context *ctx, const char *fmt, va_list ap);
void duk_remove(duk_context *ctx, int idx);
void duk_replace(duk_context *ctx, int to_idx);
int duk_require_boolean(duk_context *ctx, int idx);
void *duk_require_buffer(duk_context *ctx, int idx, size_t *out_size);
void *duk_require_buffer_data(duk_context *ctx, int idx, size_t *out_size);
duk_c_function duk_require_c_function(duk_context *ctx, int idx);
void duk_require_callable(duk_context *ctx, int idx);
void duk_require_constructable(duk_context *ctx, int idx);
void duk_require_constructor_call(duk_context *ctx);
duk_context *duk_require_context(duk_context *ctx, int idx);
void duk_require_function(duk_context *ctx, int idx);
void *duk_require_heapptr(duk_context *ctx, int idx);
int duk_require_int(duk_context *ctx, int idx);
const char *duk_require_lstring(duk_context *ctx, int idx, size_t *out_len);
int duk_require_normalize_index(duk_context *ctx, int idx);
void duk_require_null(duk_context *ctx, int idx);
double duk_require_number(duk_context *ctx, int idx);
void duk_require_object(duk_context *ctx, int idx);
void duk_require_object_coercible(duk_context *ctx, int idx);
void *duk_require_pointer(duk_context *ctx, int idx);
void duk_require_stack(duk_context *ctx, int extra);
void duk_require_stack_top(duk_context *ctx, int top);
const char *duk_require_string(duk_context *ctx, int idx);
int duk_require_top_index(duk_context *ctx);
void duk_require_type_mask(duk_context *ctx, int idx, unsigned int mask);
unsigned int duk_require_uint(duk_context *ctx, int idx);
void duk_require_undefined(duk_context *ctx, int idx);
void duk_require_valid_index(duk_context *ctx, int idx);
void *duk_resize_buffer(duk_context *ctx, int idx, size_t new_size);
void duk_resume(duk_context *ctx, const duk_thread_state *state);
int duk_safe_call(duk_context *ctx, duk_safe_call_function func, void *udata, int nargs, int nrets);
const char *duk_safe_to_lstring(duk_context *ctx, int idx, size_t *out_len);
const char *duk_safe_to_stacktrace(duk_context *ctx, int idx);
const char *duk_safe_to_string(duk_context *ctx, int idx);
int duk_samevalue(duk_context *ctx, int idx1, int idx2);
void duk_seal(duk_context *ctx, int obj_idx);
void duk_set_finalizer(duk_context *ctx, int idx);
void duk_set_global_object(duk_context *ctx);
void duk_set_length(duk_context *ctx, int idx, size_t len);
void duk_set_magic(duk_context *ctx, int idx, int magic);
void duk_set_prototype(duk_context *ctx, int idx);
void duk_set_top(duk_context *ctx, int idx);
void *duk_steal_buffer(duk_context *ctx, int idx, size_t *out_size);
int duk_strict_equals(duk_context *ctx, int idx1, int idx2);
void duk_substring(duk_context *ctx, int idx, size_t start_char_offset, size_t end_char_offset);
void duk_suspend(duk_context *ctx, duk_thread_state *state);
void duk_swap(duk_context *ctx, int idx1, int idx2);
void duk_swap_top(duk_context *ctx, int idx);
int duk_syntax_error(duk_context *ctx, const char *fmt, ...);
int duk_syntax_error_va(duk_context *ctx, const char *fmt, va_list ap);
int duk_throw(duk_context *ctx);
void duk_time_to_components(duk_context *ctx, double time, duk_time_components *comp);
int duk_to_boolean(duk_context *ctx, int idx);
void *duk_to_buffer(duk_context *ctx, int idx, size_t *out_size);
void *duk_to_dynamic_buffer(duk_context *ctx, int idx, size_t *out_size);
void *duk_to_fixed_buffer(duk_context *ctx, int idx, size_t *out_size);
int duk_to_int(duk_context *ctx, int index);
int32_t duk_to_int32(duk_context *ctx, int idx);
const char *duk_to_lstring(duk_context *ctx, int idx, size_t *out_len);
void duk_to_null(duk_context *ctx, int idx);
double duk_to_number(duk_context *ctx, int idx);
void duk_to_object(duk_context *ctx, int idx);
void *duk_to_pointer(duk_context *ctx, int idx);
void duk_to_primitive(duk_context *ctx, int idx, int hint);
const char *duk_to_stacktrace(duk_context *ctx, int idx);
const char *duk_to_string(duk_context *ctx, int idx);
unsigned int duk_to_uint(duk_context *ctx, int idx);
uint16_t duk_to_uint16(duk_context *ctx, int idx);
uint32_t duk_to_uint32(duk_context *ctx, int idx);
void duk_to_undefined(duk_context *ctx, int idx);
void duk_trim(duk_context *ctx, int idx);
int duk_type_error(duk_context *ctx, const char *fmt, ...);
int duk_type_error_va(duk_context *ctx, const char *fmt, va_list ap);
int duk_uri_error(duk_context *ctx, const char *fmt, ...);
int duk_uri_error_va(duk_context *ctx, const char *fmt, va_list ap);
void duk_xcopy_top(duk_context *to_ctx, duk_context *from_ctx, int count);
void duk_xmove_top(duk_context *to_ctx, duk_context *from_ctx, int count);